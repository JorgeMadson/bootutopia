/* utility functions for calculating window's max height and width */
Window.GetMaxWidth = fun(){
	x=0;
	width=0;
	while(Window.GetWidth(x))
	{
		width = Mat.max(width, Window.GetWidth(x));
		x++;
	}
	return width;
};

Window.GetMaxHeight = fun(){
	y=0;
	height=0;
	while(Window.GetHeight(y))
	{
		height = Mat.max(height, Window.GetHeight(x));
		y++;
	}
	return height;
}; 

/* set the displayed message array: 85 characters*/
text = "";
arr = ["!","#","$","%","&","(",")","*","+","/",
"0","1","2","3","4","5","6","7","8","9",":",";","<","=",">","?","@",
"A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z",
"[","]",
"a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z",
"{","|","}","~"];

/* For startup we want a light theme with a throbber */
if ( Plymouth.GetMode () == "boot" )
  {

/* set the background image */
/* currently works for background image size 1366x768 */
    //background.original_image = Image("images/utopia-splash.png");
	background.image = Image("images/black-world-map.png");

/* set the bg sprite position */
	//background.image = background.original_image.Scale(Window.GetMaxWidth(), Window.GetMaxHeight());
	background.sprite = SpriteNew();
	background.sprite.SetPosition(Window.GetX(), Window.GetY(), -100);
	background.sprite.SetImage(background.image);

/* black background */
    Window.SetBackgroundTopColor (0, 0, 0);
    Window.SetBackgroundBottomColor (0, 0, 0);

/* set the logo image and make its sprite */
    logo.image = Image("images/nsa-logo2.png");
    logo.sprite = Sprite(logo.image);

/*set the sprite position to center of the screen */
    logo.sprite.SetX (Window.GetWidth()  / 2 - logo.image.GetWidth()  / 2);
    logo.sprite.SetY (Window.GetHeight() / 2 - logo.image.GetHeight() / 2);

/* set the Z coordinate of sprite to above others */
    logo.sprite.SetZ (10000);

/* to make the throbbing progress bar */
    progress = 0;

/* gets the correct image of progress bar to give effect of throbbing */
    progress_box.image = Image("images/throbber-0" + progress + ".png");
    progress_box.sprite = Sprite();
    progress_box.x = Window.GetWidth() / 2 - progress_box.image.GetWidth()  / 2;
    progress_box.y = Window.GetHeight() * 0.75 - progress_box.image.GetHeight() / 2;
    progress_box.sprite.SetPosition(progress_box.x, progress_box.y, 0);
    progress_box.sprite.SetImage(progress_box.image);

/* add some text */
	warning.image = Image.Text(text,255,255,255);
	warning.sprite = Sprite();
	//warning.image = warning.image.Scale(warning.image.GetWidth()*2, warning.image.GetHeight()*2);
	warning.x = Window.GetWidth()/2 - warning.image.GetWidth()/2;
	warning.y = Window.GetHeight() * 0.80 - warning.image.GetHeight()/2;
	warning.sprite.SetPosition(warning.x, warning.y, 10000);
	warning.sprite.SetImage(warning.image);
  }
/* In every other case we just want a black background with a pulsing logo */
else
  {
    Window.SetBackgroundTopColor (0, 0, 0);
    Window.SetBackgroundBottomColor (0, 0, 0);

    logo.image = Image("images/nsa-logo3.png");
    logo.sprite = Sprite(logo.image);
    logo.opacity_angle = 0;
  }

/* This function gets called continuosly by Plymouth, up to 50 times a second */
fun refresh ()
  {
    /* Again at startup we want a throbber */
    mode = Plymouth.GetMode ();
    if (status == "normal" && mode == "boot" )
      {
        progress++;

        if (progress >= 10)
          progress = 0;

        new_progress_box.image = Image("images/throbber-0" + progress + ".png");
        progress_box.sprite.SetImage(new_progress_box.image);
        progress_box.sprite.SetOpacity(1);

		for(i=0; i<20; i++)
		{
			text = text + arr[Math.Int(Math.Random()*85)];
		}
		
		new_warning.image = Image.Text(text,255,255,255);
		warning.x = Window.GetWidth()/2 - new_warning.image.GetWidth()/2;
		warning.y = Window.GetHeight() * 0.80 - new_warning.image.GetHeight()/2;
		warning.sprite.SetPosition(warning.x, warning.y, 10000);
		warning.sprite.SetImage(new_warning.image);
		text="";
      }

    /* If we're in startup mode but status is not "normal" it probably means that 
     * some event is taking place, possibly a request for password, or maybe 
     * something failed, in any case we should just hide our throbber */
    else if (status != "normal" && mode == "boot" )
      {
        progress_box.sprite.SetOpacity(0);
      }
    /* If we've gotten here it means the system is shutting down, restarting,
     * suspending, resuming from suspend or we just don't know wtf's going on. :-D
     *
     * In any mode other than startup we just want to display a light pulsing logo
     * on a dark background not only to differentiate it from startup but also to 
     * allow the user to read any messages printed by Plymouth */
    else
      {
        logo.opacity_angle += ((2 * 3.14) / 50) * 0.5;  # 0.5 HZ
        min_opacity = 0.3;
        opacity = (Math.Cos(logo.opacity_angle) + 1) / 2;
        opacity *= 1 - min_opacity;
        opacity += min_opacity;
        logo.sprite.SetX (Window.GetWidth()  / 2 - logo.image.GetWidth()  / 2);
        logo.sprite.SetY (Window.GetHeight() / 2 - logo.image.GetHeight() / 2);
        logo.sprite.SetOpacity (opacity);
      }
  }

Plymouth.SetRefreshFunction (refresh);

/*                                   Dialogue                                  */

status = "normal";

fun dialog_setup()
  {
    local.box;
    local.lock;
    local.entry;
    
    box.image = Image("images/box.png");
    lock.image = Image("images/lock.png");
    entry.image = Image("images/entry.png");
    
    box.sprite = Sprite(box.image);
    box.x = Window.GetWidth()  / 2 - box.image.GetWidth ()/2;
    box.y = Window.GetHeight() / 2 - box.image.GetHeight()/2;
    box.z = 10000;
    box.sprite.SetPosition(box.x, box.y, box.z);
    
    lock.sprite = Sprite(lock.image);
    lock.x = box.x + box.image.GetWidth()/2 - (lock.image.GetWidth() + entry.image.GetWidth()) / 2;
    lock.y = box.y + box.image.GetHeight()/2 - lock.image.GetHeight()/2;
    lock.z = box.z + 1;
    lock.sprite.SetPosition(lock.x, lock.y, lock.z);
    
    entry.sprite = Sprite(entry.image);
    entry.x = lock.x + lock.image.GetWidth();
    entry.y = box.y + box.image.GetHeight()/2 - entry.image.GetHeight()/2;
    entry.z = box.z + 1;
    entry.sprite.SetPosition(entry.x, entry.y, entry.z);
    
    global.dialog.box = box;
    global.dialog.lock = lock;
    global.dialog.entry = entry;
    global.dialog.bullet_image = Image("images/bullet.png");
    dialog_opacity (1);
  }
    
fun dialog_opacity(opacity)
  {
    dialog.box.sprite.SetOpacity (opacity);
    dialog.lock.sprite.SetOpacity (opacity);
    dialog.entry.sprite.SetOpacity (opacity);
    for (index = 0; dialog.bullet[index]; index++)
      {
        dialog.bullet[index].sprite.SetOpacity(opacity);
      }
  }

fun display_normal_callback ()
  {
    global.status = "normal";
    if (global.dialog)
      dialog_opacity (0);
  }

fun display_password_callback (prompt, bullets)
  {
    global.status = "password";
    if (!global.dialog)
    dialog_setup();
    else
    dialog_opacity(1);
    for (index = 0; dialog.bullet[index] || index < bullets; index++)
      {
        if (!dialog.bullet[index])
          {
            dialog.bullet[index].sprite = Sprite(dialog.bullet_image);
            dialog.bullet[index].x = dialog.entry.x + index * dialog.bullet_image.GetWidth();
            dialog.bullet[index].y = dialog.entry.y + dialog.entry.image.GetHeight() / 2 - dialog.bullet_image.GetHeight() / 2;
            dialog.bullet[index].z = dialog.entry.z + 1;
            dialog.bullet[index].sprite.SetPosition(dialog.bullet[index].x, dialog.bullet[index].y, dialog.bullet[index].z);
          }
        if (index < bullets)
          dialog.bullet[index].sprite.SetOpacity(1);
        else
          dialog.bullet[index].sprite.SetOpacity(0);
      }
  }

Plymouth.SetDisplayNormalFunction(display_normal_callback);
Plymouth.SetDisplayPasswordFunction(display_password_callback);

/*                                       Quit                                    */

fun quit_callback ()
{
  logo.sprite.SetOpacity (1);
}

Plymouth.SetQuitFunction(quit_callback);

/*                                     Message                                   */

message_sprite = Sprite();
message_sprite.SetPosition(10, 10, 10000);

fun message_callback (text)
{
  my_image = Image.Text(text, 1, 1, 1);
  message_sprite.SetImage(my_image);
}

Plymouth.SetMessageFunction(message_callback);

